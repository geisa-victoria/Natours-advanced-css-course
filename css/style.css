/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/


*,
*::after,
*::before {
    margin: 0px;
    padding: 0px;
    box-sizing: inherit;
}

/* we divide 10/16 (10 is the final value that we want the rem to be
    and 16 is the default browser font-size 
    we do that so that the font-size will be translated following user specifications
    example: if the user changes the browser font-size to 20, the font-size will be
    .625x20 = 12.5px, and we can still use the value of 1rem = 10px on our code.
    */
html {
    font-size: 62.5%;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: border-box;
}

.header {
    /* vh 95% of the height of the viewport*/
    height: 95vh;
    background-image:linear-gradient(
        to right,
        rgba(126, 213, 111, 0.8),
        rgba(40, 180, 133, 0.8)),
        url('../img/hero.jpg');
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100% );
    position: relative;
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
    animation: moveInTop 1s ease-out;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    backface-visibility: hidden;
    margin-bottom: 6rem;

}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem)
    }
    80% {
        transform: translateX(1rem)
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem)
    }
    80% {
        transform: translateX(-1rem)
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInTop {
    0% {
        opacity: 0;
        transform: translateY(10rem);
    }
    80% {
        transform: translateY(-1rem);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/* we use pseudo-elements to style elements under special conditions */

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2);
}

.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .2);
}

.btn--white {
    background-color: #fff;
    color: #777;
    animation: moveInBottom 1s ease-out;
}

/* these 100% in the height and width here are relative to the btn when it's initiated before the ::after pseudo-element */
/* We always have to specify the content and the display (matching the display of the element) */
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;

}

/* Adds a virtual element right after que elemen that we're styling */ 
.btn--white::after {
    background: white;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* This applies the animation styles before the animation starts */
    animation-fill-mode: backwards;
}